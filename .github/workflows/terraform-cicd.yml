name: Terraform CI/CD (main)

on:
  pull_request:
    paths:
      - 'chapter0/**'
      - '.github/workflows/terraform-cicd.yml'
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  plan:
    name: Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: chapter0
    # plan結果をapplyへ受け渡し
    outputs:
      no_changes: ${{ steps.tfplan.outputs.no_changes }}
    env:
      TF_IN_AUTOMATION: true
      TF_INPUT: false
      AWS_REGION: ap-northeast-1
      TF_VAR_name_prefix: aws-study-tf
      TF_VAR_cidr_block: 10.0.0.0/16
      TF_VAR_ami: ami-060c08771176b34b4
      TF_VAR_instance_type: t3.micro
      TF_VAR_key_name: daijomiho
      TF_VAR_my_home_ip: 153.190.156.4/32
      TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      TF_VAR_notification_email: ${{ secrets.NOTIFICATION_EMAIL }}
    steps:
      - uses: actions/checkout@v4

      # ✅ PLANは常にPLANロールで認証（PR/MAIN問わず安全）
      - name: Configure AWS (OIDC, PLAN role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_TF_PLAN }}
          aws-region: ap-northeast-1

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - run: terraform fmt -check -recursive
      - run: terraform init -input=false -no-color
      - run: terraform validate -no-color
      - run: terraform test -no-color

      # ✅ pipefailで失敗検知、壊れたtfplanを残さない
      - name: terraform plan (detailed-exitcode, pipefail)
        id: tfplan
        run: |
          set -euo pipefail
          # 実行（出力はファイルへ、終了コードを保持）
          terraform plan -no-color -out=tfplan -input=false -detailed-exitcode > plan_raw.txt || ec=$?
          ec=${ec:-0}

          # 結果を判定してoutputsへ
          if [ "$ec" -eq 0 ]; then
            echo "no_changes=true" >> "$GITHUB_OUTPUT"
          elif [ "$ec" -eq 2 ]; then
            echo "no_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "::error::terraform plan failed (exit 1). See plan_raw.txt for details."
            exit 1
          fi

          # 人間用のplanテキスト
          terraform show -no-color tfplan > plan.txt

      # ✅ planが成功した時だけ成果物をアップロード
      - uses: actions/upload-artifact@v4
        if: success()
        with:
          name: tfplan
          path: |
            chapter0/tfplan
            chapter0/plan.txt
            chapter0/plan_raw.txt
          retention-days: 7

  apply:
    name: Apply (main only)
    needs: plan
    # ✅ mainへのpush かつ 差分あり の場合のみ実行
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.plan.outputs.no_changes == 'false'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: chapter0
    env:
      TF_IN_AUTOMATION: true
      TF_INPUT: false
      AWS_REGION: ap-northeast-1
      TF_VAR_name_prefix: aws-study-tf
      TF_VAR_cidr_block: 10.0.0.0/16
      TF_VAR_ami: ami-060c08771176b34b4
      TF_VAR_instance_type: t3.micro
      TF_VAR_key_name: daijomiho
      TF_VAR_my_home_ip: 153.190.156.4/32
      TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      TF_VAR_notification_email: ${{ secrets.NOTIFICATION_EMAIL }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC, APPLY role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_TF_APPLY }}
          aws-region: ap-northeast-1

      - uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: chapter0

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: terraform init
        run: terraform init -input=false -no-color

      - name: terraform apply
        run: terraform apply -input=false tfplan
